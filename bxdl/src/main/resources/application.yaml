# Spring Boot 配置
spring:
  # 数据源配置 (MySQL)
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource # 使用 Druid 连接池 (推荐)
    url: jdbc:mysql://139.159.247.120:31099/ai_plat_dev?useSSL=false&useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&serverTimezone=GMT%2B8&nullCatalogMeansCurrent=true
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: Km!@#$78()

    # Druid 连接池其他配置 (可选)
    druid:
      initial-size: 5 # 初始连接数
      min-idle: 5 # 最小空闲连接数
      max-active: 20 # 最大连接数
      max-wait: 60000 # 获取连接超时时间 (毫秒)
      time-between-eviction-runs-millis: 60000 # 检测连接空闲时间 (毫秒)
      min-evictable-idle-time-millis: 300000 # 连接空闲多久后回收 (毫秒)
      validation-query: SELECT 1 # 连接校验 SQL
      test-while-idle: true # 连接空闲时测试
      test-on-borrow: false # 获取连接时测试
      test-on-return: false # 归还连接时测试
      pool-prepared-statements: true # 启用 PSCache
      max-pool-prepared-statement-per-connection-size: 20 # PSCache 大小

  # Redis 配置
#  redis:
#    host: your_redis_host # Redis 主机地址
#    port: 6379 # Redis 端口
#    password: your_redis_password # Redis 密码 (如果没有则留空)
#    database: 0 # Redis 数据库索引 (默认为 0)
#    timeout: 5000ms # 连接超时时间
#    jedis:
#      pool:
#        max-active: 8 # 最大连接数
#        max-idle: 8 # 最大空闲连接数
#        min-idle: 0 # 最小空闲连接数
#        max-wait: -1ms # 最大等待时间 (负数表示无限等待)

# MyBatis-Plus 配置
mybatis-plus:
  mapper-locations: classpath:mapper/*.xml # Mapper XML 文件路径
  type-aliases-package: com.chris.bxdl.infrastructure.entity # 实体类包路径
  global-config:
    db-config:
      logic-delete-field: is_deleted # 逻辑删除字段名
      logic-delete-value: 1 # 逻辑删除值
      logic-not-delete-value: 0 # 逻辑未删除值
    id-type: auto # 主键生成策略 (AUTO, NONE, INPUT, ID_WORKER, UUID, ID_WORKER_STR)
  configuration: # MyBatis 配置
    map-underscore-to-camel-case: true # 开启驼峰命名转换
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl # 日志输出 (可选，生产环境建议使用其他日志框架)

# 日志配置 (可选，根据需要配置)
logging:
  level:
    root: INFO # 根日志级别
    com.example.demo: DEBUG # 指定包的日志级别

#服务器配置
server:
  port: 8080 #服务器端口